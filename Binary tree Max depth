///   ***   ---   |         In the name of ALLAH        |||   ---   ***   ///



#include<bits/stdc++.h>
using namespace std;


typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef pair<int,int> pii;
typedef pair<double, double> pdd;
typedef pair<ll, ll> pll;
typedef vector<pii> vii;
typedef vector<pll> vll;
typedef double dl;

#define endl '\n'
#define PB push_back
#define F first
#define S second
#define all(a) (a).begin(),(a).end()
#define rall(a) (a).rbegin(),(a).rend()
#define sz(x) (int)x.size()

const double PI = acos(-1);
const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
#define sqr(a) ((a) * (a))

#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);
#define file() freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);

#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu () {            cerr << endl;}
template < typename T, typename ... hello>void faltu( T arg, const hello &... rest) {cerr << arg << ' ';faltu(rest...);}

ll gcd ( ll a, ll b ) { return __gcd ( a, b ); }
ll lcm ( ll a, ll b ) { return a * ( b / gcd ( a, b ) ); }
typedef struct node Node;
struct node{
   int data;
   Node *left;
   Node *right;
};
Node *newNode(int val)
{
    Node *nod=(Node*)malloc(sizeof(Node));
    nod->data=val;
    nod->left=nod->right=NULL;
    return nod;
}
int maxDepth(Node *root)
{   
    if(root==NULL) return 0;
    int l=maxDepth(root->left);
    int r=maxDepth(root->right);
    return 1+max(l,r);
}
void inOrder(Node *root)
{
    if(root->left!=NULL) inOrder(root->left);
    cout<<root->data<<" ";
    if(root->right!=NULL) inOrder(root->right);
}
int main()
{
    optimize();
   Node *root=newNode(5);
   root->left=newNode(10);
   root->right=newNode(15);
   root->left->left=newNode(20);
   inOrder(root);
   cout<<endl;
int ans=maxDepth(root);
   cout<<"Max depth in this tree "<<ans<<endl;
//youtube link: https://youtu.be/eD3tmO66aBA
   return 0;
}
